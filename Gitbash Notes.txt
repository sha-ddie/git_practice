# Gitbash Navigation Notes
 
To know your current directory/folder use print working directory: "pwd"

To move or change directories/folders use  change directory: "cd"  
    -- moving into a folder: cd <folder name>
    --moving backwards by one folder: cd ..

To get a list of all the available sub-folders in a folder use list files: "ls"

To create a sub-folder/folder in the current repository use: "mkdir"  and to delete use :"rmdir"

To go back to the home directory/default use: "cd ~"

For outo completion of folder names , start typing name and use : tab

To copy a folder use : "cp <file name>"

To move a folder use: "mv <foldr name>" which is also use dfor renaming eg : mv moringa MORINGA


# Git commads
 
git clone <forked-url> : is used to download a copy of the forked folder in git into your local pc

git status : isused to check wether we have made any changes

git add --all : is used all the made changes to stage the changes made to our files to the version history and 
git commit: to finalize the process
git push : is to push the changes into github 

EX: git add README.md / --all
    git commit -m "New changes made"
    git push



# Ex of Whole process
1: create a new folder in pc : ***mkdir git_practice***
2: Insde the folder Make a git repository inorder to be able to track and commit changes : ***git init***
3:Tyr and make a change to the folder eg by makinh a new text file eg : ***touch file.txt***
4: Inorder to see changes made to the folder git-practice use : ***git status***
    - The red colour represents changes made but are not ready to be commited /not in staging area
5: To commit to a change / to move the change tothe staging area use : ***git add file.txt***
    - Now idf you use git status the file.txt  will turn green meaning its ready for commit
6: If not satisfied with the changes and you dont want to make a commit you can remove files from staging area by: ***git rm --cached file.txt*** or ***git restore --staged file.txt***
    -Now with git status the file turns red
7: You can make extra changes to the file like edit the textfile
    >vim file.txt
    -press 'i' to enter insert mode
    >'Hello There'
    -press 'Esc' to enter command mode 
    >press ***'shift' + ':' then 'wq'*** for quit and save
-To view contents of the text file use: ***less file.txt***

8:Not to ove the changes to the saging area use : ***git add file.txt*** for a specific change or ***git add -all**
9:The to commit : ***git commit -m 'Add a text file***
10:To view your commits: ***git log***

11: To push changes to the github, first make a new repo in github and create a remoteto the created repo
    -Eg new repos name is git_practice
    -To create a remote : ***git remote add origin https://github.com/sha-dddie/git_practice.git***
12:To check all the available remotes use :***git remote -v***
13:After creating a remote : ***git main -m Main*** renames that branch to main
14:Now to push changes to the remote for the first time : ***git push -u origin main*** 'push origin to main'  after this first push be using ***git push*** only


# Git Branches and merging
BRACH - is simply seperating a new set of commits or edits from the master/main and from other braches.
Branching is helful since we usually dont affect the master
A  brach ususally has the same commits/edits as the master

To create a brach use: git branch <branch name>
To check all the assocciated branches: git branch -a
To switch to the new branch: git checkout <branch name>
NB To create a branch and switch to it automatically use : git checkout -b <branch name>
To check the already made commits of the master: git log of git log --graph
Now to merge branch commits/edits to the master use: git merge <branch name> -m "message"
'while in the target branch ie master'
After merging a branch to a master you can delete it: git branch -d <branch name>